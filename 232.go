/*
232. Реализация очереди с использованием стеков
Попытка
Легкий
Темы
Компании
Реализуйте очередь «первым пришел — первым обслужен» (FIFO), используя только два стека. Реализованная очередь должна поддерживать все функции обычной очереди ( push, peek, popи empty).

Реализуйте MyQueueкласс:

void push(int x)Помещает элемент x в конец очереди.
int pop()Удаляет элемент из начала очереди и возвращает его.
int peek()Возвращает элемент в начале очереди.
boolean empty()Возвращает true, если очередь пуста, falseв противном случае.
Примечания:

Вы должны использовать только стандартные операции стека, что означает push to top, что допустимы только операции peek/pop from top, size, и .is empty
В зависимости от вашего языка стек может не поддерживаться изначально. Вы можете моделировать стек, используя список или дек (двустороннюю очередь), если вы используете только стандартные операции стека.

Пример 1:

Вход
["MyQueue", "push", "push", "peek", "pop", "пусто"]
[[], [1], [2], [], [], []]
Выход
[ноль, ноль, ноль, 1, 1, ложь]

Объяснение
MyQueue myQueue = новая MyQueue();
мояОчередь.push(1); // очередь: [1]
мояОчередь.push(2); // очередь: [1, 2] (крайний левый — в начале очереди)
мояОчередь.peek(); // возвращаем 1
мояОчередь.поп(); // возвращаем 1, очередь равна [2]
мояОчередь.пустой(); // возвращаем ложь

Ограничения:

1 <= x <= 9
В большинстве случаев 100 вызовы будут сделаны на push, pop, peekи empty.
Все вызовы popи peekдействительны.

Последующий вопрос: можете ли вы реализовать очередь так, чтобы каждая операция амортизировала O(1) временную сложность? Другими словами, выполнение nопераций займет общее O(n)время, даже если одна из этих операций может занять больше времени.
*/
package main

type MyQueue struct {
	in []int
}

func Constructor() MyQueue {
	m := new(MyQueue)
	m.in = []int{}
	return *m
}

func (this *MyQueue) Push(x int) {
	this.in = append(this.in, x)
}

func (this *MyQueue) Pop() int {
	res := this.in[0]
	this.in = this.in[0:]
	return res
}

func (this *MyQueue) Peek() int {
	return this.in[0]
}

func (this *MyQueue) Empty() bool {
	if len(this.in) == 0 {
		return true
	}

	return false
}

func main() {

}
